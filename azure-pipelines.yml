# Xamarin.Android and Xamarin.iOS
# Build a Xamarin.Android and Xamarin.iOS app.
# Add steps that test, sign, and distribute the app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

jobs:
- job: Android
  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    buildConfiguration: 'Release'
    outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'

  steps:
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@1
    inputs:
      restoreSolution: '**/*.sln'
      
  - task: PowerShell@1
    inputs:
      targetType: 'filePath'
      filePath: './prepare-build.ps1'
      #arguments: # Optional
      #script: '# Write your powershell commands here.' # Required when targetType == Inline
      #errorActionPreference: 'stop' # Optional. Options: stop, continue, silentlyContinue
      #failOnStderr: false # Optional
      #ignoreLASTEXITCODE: false # Optional
      #pwsh: false # Optional
      #workingDirectory: # Optional

  - task: XamarinAndroid@1
    inputs:
      projectFile: '**/*droid*.csproj'
      outputDirectory: '$(outputDirectory)'
      configuration: '$(buildConfiguration)'

  - task: AndroidSigning@1
    inputs:
      apkFiles: '$(outputDirectory)/*.apk'
      jarsign: true
      jarsignerKeystoreFile: 'androidSignKey.keystore'
      jarsignerKeystorePassword: '$(jarsignerKeystorePassword)'
      jarsignerKeystoreAlias: 'androidSignKey'
      jarsignerKeyPassword: '$(jarsignerKeyPassword)'
      zipalign: true
  - task: CopyFiles@1
    inputs:
      contents: '**/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(outputDirectory)'
  - task: AppCenterDistribute@1
    inputs:
      serverEndpoint: 'App Center'
      appSlug: 'samriddhac-gmail.com/test-app'
      appFile: '**/*.apk'
      releaseNotesInput: 'test release'
- job: iOS
  pool:
    vmImage: 'macOS 10.13'

  steps:
  # To manually select a Xamarin SDK version on the Hosted macOS agent, enable this script with the SDK version you want to target
  # https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_4_1 
    displayName: 'Select Xamarin SDK version'
    enabled: false

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'
      
    # Install Apple Certificate
    # Install an Apple certificate required to build on a macOS agent
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Certificates.p12'
      #certPwd: # Optional
      #keychain: 'temp' # Options: default, temp, custom
      #keychainPassword: # Required when keychain == Custom || Keychain == Default
      #customKeychainPath: # Required when keychain == Custom
      #deleteCert: # Optional
      #deleteCustomKeychain: # Optional
      #signingIdentity: # Optional

  - task: XamariniOS@2
    inputs:
      solutionFile: '**/*.sln'
      configuration: 'Release'
      buildForSimulator: true
      packageApp: false
